/**
 * LH Public API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.api;

import org.junit.Test;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.FileSystemXmlApplicationContext;
import org.junit.Before;
import static org.junit.Assert.*;

import javax.ws.rs.core.Response;
import org.apache.cxf.jaxrs.client.JAXRSClientFactory;
import org.aalto.anton.omi.lufthansa.Country;
import org.aalto.anton.omi.lufthansa.Names;
import org.aalto.anton.omi.lufthansa.ReferenceCountries;
import org.apache.cxf.configuration.jsse.TLSClientParameters;
import org.apache.cxf.jaxrs.client.ClientConfiguration;
import org.apache.cxf.jaxrs.client.WebClient;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.dataformat.xml.XmlMapper;
import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;
import com.sun.org.apache.bcel.internal.generic.InstructionConstants.Clinit;

import io.swagger.models.auth.OAuth2Definition;

import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.net.ssl.KeyManager;
import javax.net.ssl.TrustManager;
import javax.ws.rs.NotAuthorizedException;
import javax.ws.rs.core.HttpHeaders;
 
//import org.apache.cxf.rs.security.oauth2.client.OAuthClientUtils;
//import org.apache.cxf.rs.security.oauth2.client.Consumer;
//
//import org.apache.cxf.rs.security.oauth2.grants.code.AuthorizationCodeGrant;
//import org.apache.cxf.rs.security.oauth2.grants.refresh.RefreshTokenGrant;
//import org.apache.cxf.rs.security.oauth2.utils.OAuthUtils;
//import org.apache.cxf.transport.http.HTTPConduit;
//import org.apache.cxf.rs.security.oauth2.common.AccessToken;
//import org.apache.cxf.rs.security.oauth2.common.ClientAccessToken;

//import org.codehaus.jackson.map.ObjectMapper;

//import com.fasterxml.jackson.xml.XmlMapper;

/**
 * API tests for ReferenceDataApi
 */
public class ReferenceDataApiTest {


    private ReferenceDataApi api;
    private WebClient accessTokenService;
    private String authorizationServiceURI;
//    private Consumer consumer3;
//    private AuthorizationCodeGrant codeGrant3;
    private WebClient rs;
    
    @Before
    public void setup() {
//        JacksonJsonProvider provider = new JacksonJsonProvider();
//        List providers = new ArrayList();
//        providers.add(provider);
//        System.err.println("SetupSTART");
//        api = JAXRSClientFactory.create("https://api.lufthansa.com/v1", ReferenceDataApi.class, providers);
//        
//        org.apache.cxf.jaxrs.client.Client client = WebClient.client(api);
//        ClientConfiguration config = WebClient.getConfig(client);
//        System.err.println("SetupDONE");
    }
    
    /**
     * 
     *
     * List all aircraft types or one specific aircraft type.
     *
     * @throws ApiException
     *          if the Api call fails
     */
//    @Test
//    public void aircraftTest() {
//        String aircraftCode = null;
//        String accept = null;
//        String limit = null;
//        String offset = null;
	//String response = api.aircraft(aircraftCode, accept, limit, offset);
        //assertNotNull(response);
        // TODO: test validations
        
        
//    }
    
    /**
     * 
     *
     * List all airlines or one specific airline.
     *
     * @throws ApiException
     *          if the Api call fails
     */
//    @Test
//    public void airlinesTest() {
//        String airlineCode = null;
//        String accept = null;
//        String limit = null;
//        String offset = null;
	//String response = api.airlines(airlineCode, accept, limit, offset);
        //assertNotNull(response);
        // TODO: test validations
        
        
//    }
    
    /**
     * 
     *
     * List all airports or one specific airport. All airports response is very large. It is possible to request the response in a specific language.
     *
     * @throws ApiException
     *          if the Api call fails
     */
//    @Test
//    public void airportsTest() {
//        String airportCode = null;
//        String accept = null;
//        String lang = null;
//        String limit = null;
//        String offset = null;
//        Boolean lhoperated = null;
	//String response = api.airports(airportCode, accept, lang, limit, offset, lhoperated);
        //assertNotNull(response);
        // TODO: test validations
        
        
//    }
    
    /**
     * 
     *
     * List all cities or one specific city. It is possible to request the response in a specific language.
     *
     * @throws ApiException
     *          if the Api call fails
     */
//    @Test
//    public void citiesTest() {
//        String cityCode = "VER";
//        String accept = "application/json";
//        String lang = null;
//        String limit = null;
//        String offset = null;
//        System.err.println("##TEST_BEGIN##");
//        try
//        {
//	String response = api.cities(cityCode, accept, lang, limit, offset);
//        //assertNotNull(response);
//        // TODO: test validations
//	System.out.println(response);
//        }
//        catch (Exception e)
//        {
//        	e.printStackTrace();
//        }
//        System.err.println("##TEST_ENDED##");
//    }
    
    /**
     * 
     *
     * List all countries or one specific country. It is possible to request the response in a specific language.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void countriesTest() {
//        String countryCode = "FI";
//        String accept = null;
//        String lang = null;
//        String limit = null;
//        String offset = null;
//        try
//        {
//	String response = api.countries(countryCode, accept, lang, limit, offset);
//
//    ObjectMapper jsonMapper = new ObjectMapper();
//    ReferenceCountries refCountries = jsonMapper.readValue(response, ReferenceCountries.class);
//    // or
//    Country country = refCountries.getCountryResource().getCountries().getCountry();
//    Names names = country.getNames();
//
//    ObjectMapper xmlMapper = new XmlMapper();
//    String xml = xmlMapper.writeValueAsString(country);
//	System.out.println(xml);
//    ObjectMapper xmlMapper2 = new XmlMapper();
//  String xml2 = xmlMapper2.writeValueAsString(refCountries);
//	System.err.println(xml2);
//        
//  }
//  catch (Exception e)
//  {
//  	e.printStackTrace();
//  }
}
        
    
    /**
     * 
     *
     * List the 5 closest airports to the given latitude and longitude, irrespective of the radius of the reference point.
     *
     * @throws ApiException
     *          if the Api call fails
     */
//    @Test
//    public void nearestAirportsTest() {
//        Integer latitude = null;
//        Integer longitude = null;
//        String accept = null;
//        String lang = null;
	//String response = api.nearestAirports(latitude, longitude, accept, lang);
        //assertNotNull(response);
        // TODO: test validations
        
        
//    }

}
